[
  {
    "objectID": "intro_eda.html#imports",
    "href": "intro_eda.html#imports",
    "title": "Introduction and EDA",
    "section": "Imports",
    "text": "Imports\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(ggplot2)\n\n\ndiabetes_raw &lt;- read_csv(\"./data/diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "intro_eda.html#setting-up-the-data",
    "href": "intro_eda.html#setting-up-the-data",
    "title": "Introduction and EDA",
    "section": "Setting up the Data",
    "text": "Setting up the Data\nI’d like to focus on lifestyle and demographic inputs (essentially asking whether I can predict diabetes without the medical markers), so we’ll select and set up the following variables with better types or transformations where necessary.We also include BMI since it’s the only numerical predictor and will make our analysis more interesting.\n\nBMI\nSmoker\nPhysActivity\nFruits\nVeggies\nHvyAlcoholConsump\nEducation\nIncome\n\n\nspec(diabetes_raw)\n\ncols(\n  Diabetes_binary = col_double(),\n  HighBP = col_double(),\n  HighChol = col_double(),\n  CholCheck = col_double(),\n  BMI = col_double(),\n  Smoker = col_double(),\n  Stroke = col_double(),\n  HeartDiseaseorAttack = col_double(),\n  PhysActivity = col_double(),\n  Fruits = col_double(),\n  Veggies = col_double(),\n  HvyAlcoholConsump = col_double(),\n  AnyHealthcare = col_double(),\n  NoDocbcCost = col_double(),\n  GenHlth = col_double(),\n  MentHlth = col_double(),\n  PhysHlth = col_double(),\n  DiffWalk = col_double(),\n  Sex = col_double(),\n  Age = col_double(),\n  Education = col_double(),\n  Income = col_double()\n)\n\npredictors &lt;- c(\"BMI\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\", \"Education\", \"Income\")\n\ndiabetes_raw &lt;- diabetes_raw |&gt; \n  select(all_of(c(\"Diabetes_binary\", predictors)))\n\n# no missing values, so we'll continue\ndiabetes_raw |&gt;\n  is.na() |&gt;\n  colSums()\n\n  Diabetes_binary               BMI            Smoker      PhysActivity \n                0                 0                 0                 0 \n           Fruits           Veggies HvyAlcoholConsump         Education \n                0                 0                 0                 0 \n           Income \n                0 \n\ndiabetes_tbl &lt;- diabetes_raw |&gt; \n  mutate(BMI = as.numeric(BMI)) |&gt; \n  mutate(across(all_of(c(\"Diabetes_binary\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\")), ~factor(.x, levels = c(0, 1), labels = c(\"No\", \"Yes\")))) |&gt; \n  mutate(Education = factor(Education, \n                            levels = c(seq(1:6)), \n                            labels = c(\n                              \"Never attended school or only kindergarten\", \n                              \"Grades 1 through 8 (Elementary)\",\n                              \"Grades 9 through 11 (Some high school)\",\n                              \"Grade 12 or GED (High school graduate)\",\n                              \"College 1 year to 3 years (Some college or technical school)\",\n                              \"College 4 years or more (College graduate)\"))) |&gt; \n  mutate(Income = factor(Income,\n                         levels = c(1:8),\n                         labels = c(\n                           \"Less than $10,000\",\n                           \"$10,000 to less than $15,000\",\n                           \"$15,000 to less than $20,000\",\n                           \"$20,000 to less than $25,000\",\n                           \"$25,000 to less than $35,000\",\n                           \"$35,000 to less than $50,000\",\n                           \"$50,000 to less than $75,000\",\n                           \"$75,000 or more\"\n                         ))) |&gt; \n  rename(\"DiabetesOutcome\" = \"Diabetes_binary\")"
  },
  {
    "objectID": "intro_eda.html#eda",
    "href": "intro_eda.html#eda",
    "title": "Introduction and EDA",
    "section": "EDA",
    "text": "EDA\nLet’s check one-way counts and mean/sd of BMI.\n\nmap(names(diabetes_tbl)[!(names(diabetes_tbl) %in% c(\"BMI\"))], \\(column_name) table(diabetes_tbl[column_name]))\n\n[[1]]\nDiabetesOutcome\n    No    Yes \n218334  35346 \n\n[[2]]\nSmoker\n    No    Yes \n141257 112423 \n\n[[3]]\nPhysActivity\n    No    Yes \n 61760 191920 \n\n[[4]]\nFruits\n    No    Yes \n 92782 160898 \n\n[[5]]\nVeggies\n    No    Yes \n 47839 205841 \n\n[[6]]\nHvyAlcoholConsump\n    No    Yes \n239424  14256 \n\n[[7]]\nEducation\n                  Never attended school or only kindergarten \n                                                         174 \n                             Grades 1 through 8 (Elementary) \n                                                        4043 \n                      Grades 9 through 11 (Some high school) \n                                                        9478 \n                      Grade 12 or GED (High school graduate) \n                                                       62750 \nCollege 1 year to 3 years (Some college or technical school) \n                                                       69910 \n                  College 4 years or more (College graduate) \n                                                      107325 \n\n[[8]]\nIncome\n           Less than $10,000 $10,000 to less than $15,000 \n                        9811                        11783 \n$15,000 to less than $20,000 $20,000 to less than $25,000 \n                       15994                        20135 \n$25,000 to less than $35,000 $35,000 to less than $50,000 \n                       25883                        36470 \n$50,000 to less than $75,000              $75,000 or more \n                       43219                        90385 \n\nmean(diabetes_tbl$BMI)\n\n[1] 28.38236\n\nsd(diabetes_tbl$BMI)\n\n[1] 6.608694\n\n\nLet’s look for a couple of patterns, too. We’ll get a sense of more ways this can fit together when we run models, but let’s create a few two-way tables and look at how BMI fits into the picture.\n\nVoluntary activities:\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$Smoker)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Smoker\")\nprint(temp)\n\n        Smoker\nDiabetes     No    Yes\n     No  124228  94106\n     Yes  17029  18317\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$HvyAlcoholConsump)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Heavy Alc. Use\")\nprint(temp)\n\n        Heavy Alc. Use\nDiabetes     No    Yes\n     No  204910  13424\n     Yes  34514    832\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = Smoker), alpha = .5, bins = 45)\n\n\n\n\n\n\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = HvyAlcoholConsump), alpha = .5, bins = 45)\n\n\n\n\n\n\n\n\nDiabetes is notably more prevalent in this data among smokers than nonsmokers.\n\n\nFood Intake:\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$Fruits)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Fruits\")\nprint(temp)\n\n        Fruits\nDiabetes     No    Yes\n     No   78129 140205\n     Yes  14653  20693\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$Veggies)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Veggies\")\nprint(temp)\n\n        Veggies\nDiabetes     No    Yes\n     No   39229 179105\n     Yes   8610  26736\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = Fruits), alpha = .5, bins = 45)\n\n\n\n\n\n\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = Veggies), alpha = .5, bins = 45)\n\n\n\n\n\n\n\n\nIt looks like many people eat at least one serving of fruits and vegetables daily, which could make this a less powerful group of predictors.\n\n\nDemographics\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$Education)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Education\")\nprint(temp)\n\n        Education\nDiabetes Never attended school or only kindergarten\n     No                                         127\n     Yes                                         47\n        Education\nDiabetes Grades 1 through 8 (Elementary) Grades 9 through 11 (Some high school)\n     No                             2860                                   7182\n     Yes                            1183                                   2296\n        Education\nDiabetes Grade 12 or GED (High school graduate)\n     No                                   51684\n     Yes                                  11066\n        Education\nDiabetes College 1 year to 3 years (Some college or technical school)\n     No                                                         59556\n     Yes                                                        10354\n        Education\nDiabetes College 4 years or more (College graduate)\n     No                                       96925\n     Yes                                      10400\n\ntemp &lt;- table(diabetes_tbl$DiabetesOutcome, diabetes_tbl$Income)\nnames(dimnames(temp)) &lt;- c(\"Diabetes\", \"Income\")\nprint(temp)\n\n        Income\nDiabetes Less than $10,000 $10,000 to less than $15,000\n     No               7428                         8697\n     Yes              2383                         3086\n        Income\nDiabetes $15,000 to less than $20,000 $20,000 to less than $25,000\n     No                         12426                        16081\n     Yes                         3568                         4054\n        Income\nDiabetes $25,000 to less than $35,000 $35,000 to less than $50,000\n     No                         21379                        31179\n     Yes                         4504                         5291\n        Income\nDiabetes $50,000 to less than $75,000 $75,000 or more\n     No                         37954           83190\n     Yes                         5265            7195\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = Education), alpha = .5, bins = 20)\n\n\n\n\n\n\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = Income), alpha = .5, bins = 20)\n\n\n\n\n\n\n\n\nIt’s a bit harder to see patterns with more levels of each variable, but it does look like there is some impact between income level and diabetes in particular.\nOn the whole, there hasn’t been a lot of appreciable difference in BMI histogram shape between levels of each variable. We’ll do one last look at diabetes prevalence over a BMI histogram.\n\nggplot(diabetes_tbl, aes(x = BMI)) +\n  geom_histogram(aes(fill = DiabetesOutcome), alpha = .5, bins = 35)\n\n\n\n\n\n\n\n\nIt appears the “Yes” histogram could be slightly right-shifted compared to the “No,” but that also could just be us reinforcing an expectation. Let’s model to see what factors in most.\nGo to model page"
  },
  {
    "objectID": "modeling.html#imports-and-full-recipe",
    "href": "modeling.html#imports-and-full-recipe",
    "title": "Modeling",
    "section": "Imports and Full Recipe",
    "text": "Imports and Full Recipe\n\nsource(\"./Scripts/data_load.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ tibble       3.2.1\n✔ dials        1.3.0     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ recipes      1.1.0     ✔ yardstick    1.3.1\n✔ rsample      1.2.1     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use suppressPackageStartupMessages() to eliminate package startup messages\n\n\n\nset.seed(558)\n\ndiabetes_split &lt;- initial_split(diabetes_tbl, prop = .7)\ndiabetes_cv_folds &lt;- vfold_cv(training(diabetes_split), 5)\n\n# we'll standardize BMI and dummy everything else\n\ndiabetes_recipe &lt;- recipe(DiabetesOutcome ~ ., data = training(diabetes_split)) |&gt; \n  step_normalize(BMI) |&gt; \n  step_dummy(all_nominal_predictors())"
  },
  {
    "objectID": "modeling.html#classification-tree",
    "href": "modeling.html#classification-tree",
    "title": "Modeling",
    "section": "Classification Tree",
    "text": "Classification Tree\nA classification tree is a model that produces a prediction for each path through a tree of decisions based on predictor variable values. The number of minimum decision points, tree depth, and cost complexity can be chosen as hyperparameters that guide or constrain training. Here, for example, the model could split on whether the individual is a smoker, and all outputs will be either “Yes” or “No” to represent DiabetesOutput.\n\nctree_spec &lt;- decision_tree(tree_depth = tune(), min_n = 20, cost_complexity = tune()) |&gt; \n  set_engine(\"rpart\") |&gt; \n  set_mode(\"classification\")\n\nctree_wf &lt;- workflow() |&gt; \n  add_recipe(diabetes_recipe) |&gt; \n  add_model(ctree_spec)\n\nctree_grid &lt;- grid_regular(parameters(ctree_spec), levels = 5)\n\nWarning: `parameters.model_spec()` was deprecated in tune 0.1.6.9003.\nℹ Please use `hardhat::extract_parameter_set_dials()` instead.\n\n# ctree_cv_run &lt;- ctree_wf |&gt; \n#   tune_grid(resamples = diabetes_cv_folds, grid = ctree_grid, metrics = metric_set(mn_log_loss))\n\nctree_cv_run &lt;-  readRDS(\"./Saved Objects/ctree_cv_run.RDS\")\n\nctree_best_params &lt;- ctree_cv_run |&gt;\n  select_best(metric = \"mn_log_loss\")\n\n# saveRDS(ctree_cv_run, file = \"./Saved Objects/ctree_cv_run.RDS\")"
  },
  {
    "objectID": "modeling.html#random-forest",
    "href": "modeling.html#random-forest",
    "title": "Modeling",
    "section": "Random Forest",
    "text": "Random Forest\nA random forest is a collection of classification trees. It uses bootstrapping with a subset of available predictors, so each tree in a random forest can potentially look very different from the rest. Once each tree is generated on a bootstrap set with its subset of predictors, majority vote is a common way to make predictions (where the most common prediction among trees is the result). Random forests can reduce variance in parameters and outcomes compared to a single tree.\n\nrf_spec &lt;- rand_forest(mtry = tune()) |&gt;\nset_engine(\"ranger\",importance = \"impurity\") |&gt;\nset_mode(\"classification\")\n\nrf_wf &lt;- workflow() |&gt; \n  add_recipe(diabetes_recipe) |&gt; \n  add_model(rf_spec)\n\n# rf_cv_run &lt;- rf_wf |&gt; \n#   tune_grid(resamples = diabetes_cv_folds, grid = 5, metrics = metric_set(mn_log_loss))\n\nrf_cv_run &lt;- readRDS(\"./Saved Objects/rf_cv_run.RDS\")\n\nrf_best_params &lt;- rf_cv_run |&gt; \n  select_best(metric = \"mn_log_loss\")\n\n#saveRDS(rf_cv_run, file = \"./Saved Objects/rf_cv_run.RDS\")"
  },
  {
    "objectID": "modeling.html#comparison",
    "href": "modeling.html#comparison",
    "title": "Modeling",
    "section": "Comparison",
    "text": "Comparison\n\nctree_wf |&gt; \n  finalize_workflow(ctree_best_params) |&gt; \n  last_fit(diabetes_split, metrics = metric_set(mn_log_loss)) |&gt; \n  collect_metrics()\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.372 Preprocessor1_Model1\n\nrf_wf |&gt; \n  finalize_workflow(rf_best_params) |&gt; \n  last_fit(diabetes_split, metrics = metric_set(mn_log_loss)) |&gt; \n  collect_metrics()\n\nWarning: package 'ranger' was built under R version 4.4.2\n\n\n# A tibble: 1 × 4\n  .metric     .estimator .estimate .config             \n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt; &lt;chr&gt;               \n1 mn_log_loss binary         0.363 Preprocessor1_Model1\n\n\nGoing purely by minimizing log-loss, the random forest performs slightly better.\n\nrf_best_fit &lt;- rf_wf |&gt; \n  finalize_workflow(rf_best_params) |&gt; \n  fit(training(diabetes_split))\n\nsaveRDS(rf_best_fit, file=\"./Saved Objects/rf_best_wf.RDS\")"
  },
  {
    "objectID": "intro_eda.html",
    "href": "intro_eda.html",
    "title": "Introduction and EDA",
    "section": "",
    "text": "This data, from Alex Teboul’s cleaned BRFSS 2015 survey data on Kaggle, includes a handful of lifestyle, health, and demographic data points, almost all of which are categorical. We’ll use this set to train models to predict diabetes diagnosis.\n\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(ggplot2)\n\n\ndiabetes_raw &lt;- read_csv(\"./data/diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nI’d like to focus on lifestyle and demographic inputs (essentially asking whether I can predict diabetes without the medical markers), so we’ll select and set up the following variables with better types or transformations where necessary.We also include BMI since it’s the only numerical predictor and will make our analysis more interesting.\n\nBMI\nSmoker\nPhysActivity\nFruits\nVeggies\nHvyAlcoholConsump\nEducation\nIncome\n\n\nspec(diabetes_raw)\n\ncols(\n  Diabetes_binary = col_double(),\n  HighBP = col_double(),\n  HighChol = col_double(),\n  CholCheck = col_double(),\n  BMI = col_double(),\n  Smoker = col_double(),\n  Stroke = col_double(),\n  HeartDiseaseorAttack = col_double(),\n  PhysActivity = col_double(),\n  Fruits = col_double(),\n  Veggies = col_double(),\n  HvyAlcoholConsump = col_double(),\n  AnyHealthcare = col_double(),\n  NoDocbcCost = col_double(),\n  GenHlth = col_double(),\n  MentHlth = col_double(),\n  PhysHlth = col_double(),\n  DiffWalk = col_double(),\n  Sex = col_double(),\n  Age = col_double(),\n  Education = col_double(),\n  Income = col_double()\n)\n\npredictors &lt;- c(\"BMI\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\", \"Education\", \"Income\")\n\ndiabetes_raw &lt;- diabetes_raw |&gt; \n  select(all_of(c(\"Diabetes_binary\", predictors)))\n\n# no missing values, so we'll continue\ndiabetes_raw |&gt;\n  is.na() |&gt;\n  colSums()\n\n  Diabetes_binary               BMI            Smoker      PhysActivity \n                0                 0                 0                 0 \n           Fruits           Veggies HvyAlcoholConsump         Education \n                0                 0                 0                 0 \n           Income \n                0 \n\ndiabetes_tbl &lt;- diabetes_raw |&gt; \n  mutate(BMI = as.numeric(BMI)) |&gt; \n  mutate(across(all_of(c(\"Diabetes_binary\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\")), ~factor(.x, levels = c(0, 1), labels = c(\"No\", \"Yes\")))) |&gt; \n  mutate(Education = factor(Education, \n                            levels = c(seq(1:6)), \n                            labels = c(\n                              \"Never attended school or only kindergarten\", \n                              \"Grades 1 through 8 (Elementary)\",\n                              \"Grades 9 through 11 (Some high school)\",\n                              \"Grade 12 or GED (High school graduate)\",\n                              \"College 1 year to 3 years (Some college or technical school)\",\n                              \"College 4 years or more (College graduate)\"))) |&gt; \n  mutate(Income = factor(Income,\n                         levels = c(1:8),\n                         labels = c(\n                           \"Less than $10,000\",\n                           \"$10,000 to less than $15,000\",\n                           \"$15,000 to less than $20,000\",\n                           \"$20,000 to less than $25,000\",\n                           \"$25,000 to less than $35,000\",\n                           \"$35,000 to less than $50,000\",\n                           \"$50,000 to less than $75,000\",\n                           \"$75,000 or more\"\n                         ))) |&gt; \n  rename(\"DiabetesOutcome\" = \"Diabetes_binary\")"
  },
  {
    "objectID": "intro_eda.html#introduction",
    "href": "intro_eda.html#introduction",
    "title": "Introduction and EDA",
    "section": "",
    "text": "This data, from Alex Teboul’s cleaned BRFSS 2015 survey data on Kaggle, includes a handful of lifestyle, health, and demographic data points, almost all of which are categorical. We’ll use this set to train models to predict diabetes diagnosis.\n\n\n\nlibrary(readr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(ggplot2)\n\n\ndiabetes_raw &lt;- read_csv(\"./data/diabetes_binary_health_indicators_BRFSS2015.csv\")\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nI’d like to focus on lifestyle and demographic inputs (essentially asking whether I can predict diabetes without the medical markers), so we’ll select and set up the following variables with better types or transformations where necessary.We also include BMI since it’s the only numerical predictor and will make our analysis more interesting.\n\nBMI\nSmoker\nPhysActivity\nFruits\nVeggies\nHvyAlcoholConsump\nEducation\nIncome\n\n\nspec(diabetes_raw)\n\ncols(\n  Diabetes_binary = col_double(),\n  HighBP = col_double(),\n  HighChol = col_double(),\n  CholCheck = col_double(),\n  BMI = col_double(),\n  Smoker = col_double(),\n  Stroke = col_double(),\n  HeartDiseaseorAttack = col_double(),\n  PhysActivity = col_double(),\n  Fruits = col_double(),\n  Veggies = col_double(),\n  HvyAlcoholConsump = col_double(),\n  AnyHealthcare = col_double(),\n  NoDocbcCost = col_double(),\n  GenHlth = col_double(),\n  MentHlth = col_double(),\n  PhysHlth = col_double(),\n  DiffWalk = col_double(),\n  Sex = col_double(),\n  Age = col_double(),\n  Education = col_double(),\n  Income = col_double()\n)\n\npredictors &lt;- c(\"BMI\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\", \"Education\", \"Income\")\n\ndiabetes_raw &lt;- diabetes_raw |&gt; \n  select(all_of(c(\"Diabetes_binary\", predictors)))\n\n# no missing values, so we'll continue\ndiabetes_raw |&gt;\n  is.na() |&gt;\n  colSums()\n\n  Diabetes_binary               BMI            Smoker      PhysActivity \n                0                 0                 0                 0 \n           Fruits           Veggies HvyAlcoholConsump         Education \n                0                 0                 0                 0 \n           Income \n                0 \n\ndiabetes_tbl &lt;- diabetes_raw |&gt; \n  mutate(BMI = as.numeric(BMI)) |&gt; \n  mutate(across(all_of(c(\"Diabetes_binary\", \"Smoker\", \"PhysActivity\", \"Fruits\", \"Veggies\", \"HvyAlcoholConsump\")), ~factor(.x, levels = c(0, 1), labels = c(\"No\", \"Yes\")))) |&gt; \n  mutate(Education = factor(Education, \n                            levels = c(seq(1:6)), \n                            labels = c(\n                              \"Never attended school or only kindergarten\", \n                              \"Grades 1 through 8 (Elementary)\",\n                              \"Grades 9 through 11 (Some high school)\",\n                              \"Grade 12 or GED (High school graduate)\",\n                              \"College 1 year to 3 years (Some college or technical school)\",\n                              \"College 4 years or more (College graduate)\"))) |&gt; \n  mutate(Income = factor(Income,\n                         levels = c(1:8),\n                         labels = c(\n                           \"Less than $10,000\",\n                           \"$10,000 to less than $15,000\",\n                           \"$15,000 to less than $20,000\",\n                           \"$20,000 to less than $25,000\",\n                           \"$25,000 to less than $35,000\",\n                           \"$35,000 to less than $50,000\",\n                           \"$50,000 to less than $75,000\",\n                           \"$75,000 or more\"\n                         ))) |&gt; \n  rename(\"DiabetesOutcome\" = \"Diabetes_binary\")"
  },
  {
    "objectID": "modeling.html",
    "href": "modeling.html",
    "title": "Modeling",
    "section": "",
    "text": "source(\"./Scripts/data_load.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ tibble       3.2.1\n✔ dials        1.3.0     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ recipes      1.1.0     ✔ yardstick    1.3.1\n✔ rsample      1.2.1     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\n\n\nset.seed(558)\n\ndiabetes_split &lt;- initial_split(diabetes_tbl, prop = .7)\ndiabetes_cv_folds &lt;- vfold_cv(training(diabetes_split), 5)\n\n# we'll standardize BMI and dummy everything else\n\ndiabetes_recipe &lt;- recipe(DiabetesOutcome ~ ., data = training(diabetes_split)) |&gt; \n  step_normalize(BMI) |&gt; \n  step_dummy(all_nominal_predictors())"
  },
  {
    "objectID": "modeling.html#introduction",
    "href": "modeling.html#introduction",
    "title": "Modeling",
    "section": "",
    "text": "source(\"./Scripts/data_load.R\")\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nRows: 253680 Columns: 22\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (22): Diabetes_binary, HighBP, HighChol, CholCheck, BMI, Smoker, Stroke,...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlibrary(tidymodels)\n\nWarning: package 'tidymodels' was built under R version 4.4.2\n\n\n── Attaching packages ────────────────────────────────────── tidymodels 1.2.0 ──\n✔ broom        1.0.6     ✔ tibble       3.2.1\n✔ dials        1.3.0     ✔ tidyr        1.3.1\n✔ infer        1.0.7     ✔ tune         1.2.1\n✔ modeldata    1.4.0     ✔ workflows    1.1.4\n✔ parsnip      1.2.1     ✔ workflowsets 1.1.0\n✔ recipes      1.1.0     ✔ yardstick    1.3.1\n✔ rsample      1.2.1     \n\n\nWarning: package 'dials' was built under R version 4.4.2\n\n\nWarning: package 'infer' was built under R version 4.4.2\n\n\nWarning: package 'modeldata' was built under R version 4.4.2\n\n\nWarning: package 'parsnip' was built under R version 4.4.2\n\n\nWarning: package 'recipes' was built under R version 4.4.2\n\n\nWarning: package 'rsample' was built under R version 4.4.2\n\n\nWarning: package 'tune' was built under R version 4.4.2\n\n\nWarning: package 'workflows' was built under R version 4.4.2\n\n\nWarning: package 'workflowsets' was built under R version 4.4.2\n\n\nWarning: package 'yardstick' was built under R version 4.4.2\n\n\n── Conflicts ───────────────────────────────────────── tidymodels_conflicts() ──\n✖ scales::discard() masks purrr::discard()\n✖ dplyr::filter()   masks stats::filter()\n✖ dplyr::lag()      masks stats::lag()\n✖ yardstick::spec() masks readr::spec()\n✖ recipes::step()   masks stats::step()\n• Use tidymodels_prefer() to resolve common conflicts.\n\n\n\nset.seed(558)\n\ndiabetes_split &lt;- initial_split(diabetes_tbl, prop = .7)\ndiabetes_cv_folds &lt;- vfold_cv(training(diabetes_split), 5)\n\n# we'll standardize BMI and dummy everything else\n\ndiabetes_recipe &lt;- recipe(DiabetesOutcome ~ ., data = training(diabetes_split)) |&gt; \n  step_normalize(BMI) |&gt; \n  step_dummy(all_nominal_predictors())"
  }
]